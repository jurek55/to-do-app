{"version":3,"sources":["modules/Task.js","modules/TasksListToDo.js","modules/TasksListDone.js","modules/NewTask.js","modules/App.js","serviceWorker.js","index.js"],"names":["Task","props","task","tekst","termin","id","done","wennDone","color","important","style","onClick","archive","delete","TasksListToDo","taskslist","filter","map","key","TasksListDone","NewTask","Fragment","value","state","date","type","onChange","form","min","checked","text","rows","cols","placeholder","send","App","data","wenndone","handleDeleteButton","index","findIndex","item","splice","setState","handleArchiveButton","wenn","Date","toLocaleString","handleForm","e","button","target","handleSendButton","preventDefault","newData","console","log","newId","length","newItem","push","tasks","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f87e3f47.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Task = (props) => {\r\nconst {tekst, termin, id, done, wennDone, important}=props.task;\r\nlet color = {};\r\nif (important)\r\n{\r\n    color = {color:'red'}\r\n}\r\n    return ( \r\n    <p>\r\n    <strong style={color}>{tekst}, termin wykonania do {termin} </strong>\r\n    {!done ? <button onClick={()=>props.archive(id)} >wykonane</button> : <p>wykonano {wennDone}</p>}\r\n    <button onClick={()=>props.delete(id)} >usuń</button>\r\n    </p>\r\n     );\r\n}\r\n \r\nexport default Task;","import React from 'react';\r\nimport Task from './Task';\r\n\r\nconst TasksListToDo= (props) => {\r\n    const toDo=props.taskslist.filter(task=>!task.done);\r\n    /* const done=props.taskslist.filter(task=>task.done); */\r\n    /* console.log(done) */\r\n    return (\r\n        toDo.map(task=> <Task key={task.id} task={task}  archive={props.archive} delete={props.delete}/>)\r\n     );\r\n}\r\n \r\nexport default TasksListToDo;","import React from 'react';\r\nimport Task from './Task';\r\n\r\nconst TasksListDone= (props) => {\r\n    const done=props.taskslist.filter(task=>task.done);\r\n    /* console.log(done) */\r\n    return (\r\n        done.map(task=> <Task key={task.id} task={task}  archive={props.archive} delete={props.delete}/>)\r\n     );\r\n}\r\n \r\nexport default TasksListDone;","import React from 'react';\r\nconst NewTask = (props) => {\r\n    return ( \r\n        <React.Fragment>\r\n            <form>\r\n            <p>\r\n            <input value={props.state.date} type='date' id='termin' onChange={props.form} min='2020-03-03'></input>\r\n            <input type='checkbox' onChange={props.form} checked={props.state.checked} id='important'></input>\r\n            </p>\r\n            <p><textarea value={props.state.text} onChange={props.form} rows='10' cols='40' placeholder='...opis zadania' id='task'></textarea></p>\r\n           <button onClick={props.send}>zapisz</button>\r\n            </form>\r\n        </React.Fragment>\r\n     );\r\n}\r\n \r\nexport default NewTask;","import React, {Component, Fragment} from 'react';\nimport './App.css';\nimport TasksListToDo from './TasksListToDo';\nimport TasksListDone from './TasksListDone';\nimport NewTask from './NewTask';\n\nclass App extends Component {\n  state = { \n    data: [\n      {id: 0,\n      tekst: 'książka',\n      termin: '2020-03-11',\n      done: false,\n      wenndone: '',\n      important: true},\n      {id: 1,\n      tekst: 'rower',\n      termin: '2020-05-18',\n      done: false,\n      wenndone: '',\n      important: false},\n      {id: 2,\n      tekst: 'narty',\n      termin: '2020-03-21',\n      done: false,\n      wenndone: '',\n      important: true}\n  ],\n    text: '',\n    checked:  false,\n    date: ''\n   } \n   handleDeleteButton=(id)=>{\n      const data=[...this.state.data];\n      const index=data.findIndex(item =>item.id === id);\n      data.splice(index,1);\n      this.setState({\n        data\n      })\n   }\n   handleArchiveButton=(id)=>{\n      const data=[...this.state.data];\n      const index=data.findIndex(item =>item.id === id);\n      data[index].done = true;\n      const wenn=new Date();\n      data[index].wennDone = wenn.toLocaleString();\n      this.setState({\n        data\n      })\n   }\n   handleForm=(e)=>{\n     const button = e.target.id;\n    /*  console.log(button) */\n     const value = e.target.value;\n        if (button === 'task'){\n        this.setState({\n          text: value\n        })\n        }\n        else if (button === 'termin'){\n          this.setState({\n          date: value\n          })\n          /* console.log(this.state.date) */\n        }\n        else if (button === 'important'){\n          this.setState({\n          checked: e.target.checked\n          })\n        }\n   }\n   handleSendButton=(e)=>{\n      e.preventDefault();\n      const newData=[...this.state.data];\n      console.log(newData);\n      const newId=newData.length;\n      console.log(newId)\n      const newItem = {\n        id: newId,\n        tekst: this.state.text,\n        termin: this.state.date,\n        done: false,\n        wenndone: '',\n        important: this.state.checked\n        };\n      newData.push(newItem);\n      \n      this.setState({\n        data: newData,\n        text:'',\n        checked: false,\n        date: ''\n\n      })\n   }\n  render() { \n    const tasks=[...this.state.data];\n     console.log(this.state.data);\n    /* console.log(this.state.text); */\n    return ( \n      <Fragment>\n      <h1 >Nowe zadanie</h1>\n      <NewTask form={this.handleForm} state={this.state} send={this.handleSendButton}/>\n      <hr/>\n      <h1 style={{color:'red'}}>Lista zadań</h1>\n      <TasksListToDo taskslist={tasks}  archive={this.handleArchiveButton} delete={this.handleDeleteButton}/> \n      <hr/>\n      <h1 >Zarchiwizowane</h1>\n      <TasksListDone taskslist={tasks}  archive={this.handleArchiveButton} delete={this.handleDeleteButton}/>\n      </Fragment> \n    );\n  }\n}\n \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './modules/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}